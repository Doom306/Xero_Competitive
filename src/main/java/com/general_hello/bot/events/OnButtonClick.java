package com.general_hello.bot.events;

import com.general_hello.bot.objects.ELOUser;
import com.general_hello.bot.objects.Matchmaking;
import com.general_hello.bot.objects.enums.Map;
import net.dv8tion.jda.api.entities.User;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.GenericSelectMenuInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class is used to handle button clicks and select menu interactions.
 */
public class OnButtonClick extends ListenerAdapter {
    /**
     * A logger object used for logging information about button clicks.
     */
    private static final Logger LOGGER = LoggerFactory.getLogger(OnButtonClick.class);

    /**
     * This method is called when a button is clicked.
     * @param event the event that is fired when a button is clicked.
     */
    @Override
    public void onButtonInteraction(@NotNull ButtonInteractionEvent event) {
        if (ELOUser.isBanned(event.getUser().getIdLong())) {
            event.reply("You are banned from using this bot").setEphemeral(true).queue();
            return;
        }
        // users can spoof this id so be careful what you do with this
        String[] id = event.getComponentId().split(":"); // this is the custom id we specified in our button
        String authorId = id[0];

        if (id.length == 1) {
            return;
        }

        String type = id[1];

        // When storing state like this is it is highly recommended doing some kind of verification that it was generated by you, for instance a signature or local cache
        if (!authorId.equals("0000") && !authorId.equals(event.getUser().getId())) {
            event.reply("You can't press this button").setEphemeral(true).queue();
            return;
        }

        User author = event.getUser();

        switch (type) {
            case "join" -> {
                if (Matchmaking.Match.usersToMatch.containsKey(author.getIdLong())) {
                    event.reply("You are already in a match").setEphemeral(true).queue();
                    return;
                }

                if (Matchmaking.isInQueue(author.getIdLong())) {
                    event.reply("You are already in the queue").setEphemeral(true).queue();
                    return;
                }
                event.deferEdit().queue();

                Matchmaking.addToQueue(author.getIdLong());
                event.getHook().editOriginalEmbeds(Matchmaking.getQueueEmbed(event.getGuild()).build())
                        .setComponents(Matchmaking.getQueueActionRow()).queue();
            }
            case "leave" -> {
                if (Matchmaking.Match.usersToMatch.containsKey(author.getIdLong())) {
                    event.reply("You are already in a match").setEphemeral(true).queue();
                    return;
                }

                if (!Matchmaking.isInQueue(author.getIdLong())) {
                    event.reply("You are not in the queue").setEphemeral(true).queue();
                    return;
                }
                event.deferEdit().queue();

                Matchmaking.removeFromQueue(author.getIdLong());
                event.getHook().editOriginalEmbeds(Matchmaking.getQueueEmbed(event.getGuild()).build())
                        .setComponents(Matchmaking.getQueueActionRow()).queue();
            }
        }
    }

    /**
     * This method is called when a select menu is clicked.
     * @param event the event that is fired when a select menu is clicked.
     */
    @Override
    public void onGenericSelectMenuInteraction(@NotNull GenericSelectMenuInteractionEvent event) {
        if (ELOUser.isBanned(event.getUser().getIdLong())) {
            event.reply("You are banned from using this bot").setEphemeral(true).queue();
            return;
        }
        String value = (String) event.getValues().get(0);
        // map banning
        String id = event.getSelectMenu().getId();
        if (id.startsWith("map")) {
            String[] split = id.split(":");
            String authorId = split[1];
            if (!authorId.equals("0000") && !authorId.equals(event.getUser().getId())) {
                event.reply("You can't press this button").setEphemeral(true).queue();
                return;
            }
            event.deferEdit().queue();
            Matchmaking.Match match = Matchmaking.Match.usersToMatch.get(event.getUser().getIdLong());
            match.banMap(Map.getMap(value), event.getGuild(), event);
        } else if (id.startsWith("winner")) {
            String[] split = id.split(":");
            String authorId = split[1];
            if (!authorId.equals("0000") && !authorId.equals(event.getUser().getId())) {
                event.reply("You can't press this button").setEphemeral(true).queue();
                return;
            }

            Matchmaking.Match match = Matchmaking.Match.usersToMatch.get(event.getUser().getIdLong());
            match.endMatch(value, event.getGuild(), event);
        }
    }
}
